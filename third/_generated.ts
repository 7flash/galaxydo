/* eslint-disable */
// Generated by convex-dev@0.1.1
// based on the contents of this directory.
// To regenerate, run `convex codegen`.
import type authCreateAccount from "./authCreateAccount";
import type getAccountById from "./getAccountById";
import type getAccountBySignature from "./getAccountBySignature";
import type getFractalRooms from "./getFractalRooms";
import type getGalaxiesHistory from "./getGalaxiesHistory";
import type getMyGalaxies from "./getMyGalaxies";
import type getProposalStats from "./getProposalStats";
import type getProposedGalaxies from "./getProposedGalaxies";
import type getProposerUsers from "./getProposerUsers";
import type getRoomById from "./getRoomById";
import type getUniverse from "./getUniverse";
import type getUniverses from "./getUniverses";
import type getUserCurrentProposal from "./getUserCurrentProposal";
import type userCreateGalaxy from "./userCreateGalaxy";
import type userCreateRoom from "./userCreateRoom";
import type userCreateUniverse from "./userCreateUniverse";
import type userDenyProposal from "./userDenyProposal";
import type userExecuteProposal from "./userExecuteProposal";
import type userJoinRoom from "./userJoinRoom";
import type userProposeGalaxy from "./userProposeGalaxy";
import type userUpdateAccountName from "./userUpdateAccountName";

// This jumpstarts TypeScript completion of the convex-dev/values entry point.
import type { Id } from "convex-dev/values";
if ("VSCode" === "sees" + "that this module is imported") {
  const msg = "you get great autocompletion for" + ("Id" as unknown as Id);
  throw new Error("Unreachable");
}
import type { MutationCtx, QueryCtx } from "convex-dev/server";

type DropFirst<T extends unknown[]> = T extends [any, ...infer U] ? U : never;
type UndefinedToNull<T extends unknown> = T extends void ? null : T;

type ClientMutation<F extends (first: MutationCtx, ...args: any) => any> = (
  ...args: DropFirst<Parameters<F>>
) => UndefinedToNull<Awaited<ReturnType<F>>>;
type ClientQuery<F extends (first: QueryCtx, ...args: any) => any> = (
  ...args: DropFirst<Parameters<F>>
) => UndefinedToNull<Awaited<ReturnType<F>>>;

/**
 * A type describing your app's public Convex API.
 *
 * This `ConvexAPI` type includes information about the arguments and return
 * types of your app's query and mutation functions.
 *
 * This type should be used with type-parameterized classes like
 * `ConvexReactClient` to create app-specific types.
 */
export type ConvexAPI = {
  queries: {
    getAccountById: ClientQuery<typeof getAccountById>;
    getAccountBySignature: ClientQuery<typeof getAccountBySignature>;
    getFractalRooms: ClientQuery<typeof getFractalRooms>;
    getGalaxiesHistory: ClientQuery<typeof getGalaxiesHistory>;
    getMyGalaxies: ClientQuery<typeof getMyGalaxies>;
    getProposalStats: ClientQuery<typeof getProposalStats>;
    getProposedGalaxies: ClientQuery<typeof getProposedGalaxies>;
    getProposerUsers: ClientQuery<typeof getProposerUsers>;
    getUniverse: ClientQuery<typeof getUniverse>;
    getUniverses: ClientQuery<typeof getUniverses>;
    getUserCurrentProposal: ClientQuery<typeof getUserCurrentProposal>;
  };
  mutations: {
    authCreateAccount: ClientMutation<typeof authCreateAccount>;
    getRoomById: ClientMutation<typeof getRoomById>;
    userCreateGalaxy: ClientMutation<typeof userCreateGalaxy>;
    userCreateRoom: ClientMutation<typeof userCreateRoom>;
    userCreateUniverse: ClientMutation<typeof userCreateUniverse>;
    userDenyProposal: ClientMutation<typeof userDenyProposal>;
    userExecuteProposal: ClientMutation<typeof userExecuteProposal>;
    userJoinRoom: ClientMutation<typeof userJoinRoom>;
    userProposeGalaxy: ClientMutation<typeof userProposeGalaxy>;
    userUpdateAccountName: ClientMutation<typeof userUpdateAccountName>;
  };
};

import { makeUseQuery, makeUseMutation, makeUseConvex } from "convex-dev/react";

/**
 * Load a reactive query within a React component.
 *
 * This React hook contains internal state that will cause a rerender whenever
 * the query result changes.
 *
 * This relies on the {@link ConvexProvider} being above in the React component tree.
 *
 * @param name - The name of the query function.
 * @param args - The arguments to the query function.
 * @returns `undefined` if loading and the query's return value otherwise.
 */
export const useQuery = makeUseQuery<ConvexAPI>();

/**
 * Construct a new {@link ReactMutation}.
 *
 * Mutation objects can be called like functions to request execution of the
 * corresponding Convex function, or further configured with
 * [optimistic updates](https://docs.convex.dev/using/optimistic-updates).
 *
 * The value returned by this hook is stable across renders, so it can be used
 * by React dependency arrays and memoization logic relying on object identity
 * without causing rerenders.
 *
 * This relies on the {@link ConvexProvider} being above in the React component tree.
 *
 * @param name - The name of the mutation.
 * @returns The {@link ReactMutation} object with that name.
 */
export const useMutation = makeUseMutation<ConvexAPI>();

/**
 * Get the {@link ConvexReactClient} within a React component.
 *
 * This relies on the {@link ConvexProvider} being above in the React component tree.
 *
 * @returns The active {@link ConvexReactClient} object, or `undefined`.
 */
export const useConvex = makeUseConvex<ConvexAPI>();
